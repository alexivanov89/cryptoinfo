{"version":3,"file":"static/js/680.42180a2b.chunk.js","mappings":"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","sources":["components/Page/Page.tsx","hooks/useAppDispatch.ts","hooks/useAppSelector.ts","pages/CoinPage/CoinPage.tsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport { forwardRef, PropsWithChildren, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet-async';\n\ninterface IPageProps {\n  children: ReactNode;\n  title: string;\n  description: string;\n}\n\nconst Page = forwardRef<ReactNode, PropsWithChildren<IPageProps>>(\n  ({ children, title = '', description = '', ...other }, ref) => (\n    <Box ref={ref} {...other}>\n      <Helmet>\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n      </Helmet>\n      {children}\n    </Box>\n  ),\n);\n\nexport default Page;\n","import { useDispatch } from 'react-redux';\nimport type { AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from '../store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Box, styled, Typography } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Chart as ChartJS, registerables } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { Page } from '../../components/Page';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport { coinGeckoService } from '../../services/coinGeckoService';\nimport {\n  fetchCurrentCoin,\n  selectCurrentCoin,\n} from '../../store/slices/coinsSlice';\n\nChartJS.register(...registerables);\n\nconst ContainerStyle = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  [theme.breakpoints.down('md')]: {\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n}));\n\nconst Sidebar = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  width: '30%',\n  flexDirection: 'column',\n  alignItems: 'center',\n  marginTop: 3,\n  borderRight: ' 2px solid white',\n  [theme.breakpoints.down('md')]: {\n    width: '100%',\n    border: 'none',\n  },\n}));\n\nconst ChartContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  width: '70%',\n  flexDirection: 'column',\n  alignItems: 'center',\n  marginTop: 3,\n  [theme.breakpoints.down('md')]: {\n    width: '100%',\n  },\n}));\n\nconst chartDays = [\n  {\n    label: '24 Hours',\n    value: 1,\n  },\n  {\n    label: '30 Days',\n    value: 30,\n  },\n  {\n    label: '3 Months',\n    value: 90,\n  },\n  {\n    label: '1 Year',\n    value: 365,\n  },\n];\n\nconst CoinPage = () => {\n  const { id } = useParams();\n  const dispatch = useAppDispatch();\n  const { value: coin, isLoading, error } = useAppSelector(selectCurrentCoin);\n\n  const [dataChart, SetDataChart] = useState<[[number, number]] | null>(null);\n  const [days, setDays] = useState(1);\n\n  const fetchData = useCallback(async () => {\n    if (!coin?.id) return;\n    const { data } = await coinGeckoService.getChart(coin?.id, days);\n    SetDataChart(data.prices);\n  }, [coin?.id, days]);\n\n  useEffect(() => {\n    if (id) dispatch(fetchCurrentCoin(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData, days]);\n\n  return (\n    <Page title={`${id} | CryptaInfo`} description={`${id}`}>\n      <ContainerStyle>\n        {isLoading && <div>...Loading</div>}\n        {!isLoading && !error && (\n          <Sidebar>\n            <img\n              src={coin?.image?.large}\n              alt={coin?.name}\n              height=\"200\"\n              style={{ marginBottom: 3 }}\n            />\n            <Typography variant=\"h3\">{coin?.name}</Typography>\n            <Box\n              sx={[\n                {\n                  display: 'flex',\n                  padding: '0px 8px ',\n                  maxHeight: 'calc(100vh - 330px)',\n                  maxWidth: 'calc(100%)',\n                  overflowY: 'auto',\n                  wordBreak: 'break-word',\n                  flexDirection: 'column',\n                },\n                (theme) => ({\n                  [theme.breakpoints.down('md')]: {\n                    overflowY: 'unset',\n                    maxHeight: 'unset',\n                  },\n                }),\n              ]}\n            >\n              <Typography variant=\"body1\">{coin?.description.en}</Typography>\n              <Box>\n                <Typography\n                  sx={{ display: 'contents', fontWeight: 'bold' }}\n                  variant=\"body2\"\n                >{`Current price: `}</Typography>\n                &nbsp;\n                <Typography sx={{ display: 'contents' }} variant=\"body2\">\n                  {`${coin?.market_data.current_price.rub} rub`}\n                </Typography>\n              </Box>\n              <Box>\n                <Typography\n                  sx={{ display: 'contents', fontWeight: 'bold' }}\n                  variant=\"body2\"\n                >{`Market Cap: `}</Typography>\n                &nbsp;\n                <Typography sx={{ display: 'contents' }} variant=\"body2\">\n                  {`${coin?.market_data.market_cap.rub} rub`}\n                </Typography>\n              </Box>\n            </Box>\n          </Sidebar>\n        )}\n\n        <ChartContainer>\n          {!isLoading && !error && dataChart && (\n            <>\n              <Line\n                data={{\n                  labels: dataChart?.map((item: [number, number]) => {\n                    const date = new Date(item[0]);\n                    const time =\n                      date.getHours() > 12\n                        ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                        : `${date.getHours()}:${date.getMinutes()} AM`;\n                    return days === 1 ? time : date.toLocaleDateString();\n                  }),\n\n                  datasets: [\n                    {\n                      data: dataChart?.map((item: [number, number]) => item[1]),\n                      label: `Price ( Past ${days} Days )`,\n                      borderColor: '#EEBC1D',\n                    },\n                  ],\n                }}\n                options={{\n                  elements: {\n                    point: {\n                      radius: 1,\n                    },\n                  },\n                }}\n              />\n              <div>\n                {chartDays.map((day) => (\n                  <button\n                    type=\"button\"\n                    key={day.value}\n                    onClick={() => {\n                      setDays(day.value);\n                    }}\n                  >\n                    {day.label}\n                  </button>\n                ))}\n              </div>\n            </>\n          )}\n        </ChartContainer>\n      </ContainerStyle>\n    </Page>\n  );\n};\n\nexport default CoinPage;\n"],"names":["forwardRef","ref","children","title","description","other","Box","name","content","useAppDispatch","useDispatch","useAppSelector","useSelector","ChartJS","registerables","ContainerStyle","styled","theme","display","breakpoints","down","flexDirection","alignItems","Sidebar","width","marginTop","borderRight","border","ChartContainer","chartDays","label","value","id","useParams","dispatch","selectCurrentCoin","coin","isLoading","error","useState","dataChart","SetDataChart","days","setDays","fetchData","useCallback","coinGeckoService","data","prices","useEffect","fetchCurrentCoin","src","image","large","alt","height","style","marginBottom","variant","sx","padding","maxHeight","maxWidth","overflowY","wordBreak","en","fontWeight","market_data","current_price","rub","market_cap","labels","map","item","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","borderColor","options","elements","point","radius","day","type","onClick"],"sourceRoot":""}