{"version":3,"file":"static/js/768.fbc62a19.chunk.js","mappings":"iPAsBA,GAZaA,EAAAA,EAAAA,aACX,WAAuDC,GAAvD,IAAGC,EAAH,EAAGA,SAAH,IAAaC,MAAAA,OAAb,MAAqB,GAArB,MAAyBC,YAAAA,OAAzB,MAAuC,GAAvC,EAA8CC,GAA9C,mBACE,UAACC,EAAA,GAAD,gBAAKL,IAAKA,GAASI,GAAnB,eACE,UAAC,KAAD,YACE,2BAAQF,KACR,iBAAMI,KAAK,cAAcC,QAASJ,OAEnCF,U,0FCdMO,EAAiB,kBAAMC,EAAAA,EAAAA,OCAvBC,EAAkDC,EAAAA,I,mOCmH/D,EArGkB,WAChB,IAAMC,GAAWJ,EAAAA,EAAAA,KACjB,GAA4CE,EAAAA,EAAAA,GAAeG,EAAAA,IAA3CC,EAAhB,EAAQC,OAAeC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,MAC5BC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KASA,OAHAC,EAAAA,EAAAA,YAAU,WACRX,GAASY,EAAAA,EAAAA,SACR,CAACZ,KAEF,gCACGI,GACC,SAACS,EAAA,EAAD,KAEA,UAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,EACXC,GAAI,CACF,CACEC,aAAc,MACdC,gBAAiB,WAEnB,CAAE,aAAc,CAAEC,MAAO,WAP7B,WAUE,UAACC,EAAA,EAAD,CAAO,aAAW,eAAlB,WACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,oBACA,SAACA,EAAA,EAAD,kCAGJ,UAACC,EAAA,EAAD,YACIvB,IACA,yBACE,yBACE,6CAIHA,GACDA,EAAMwB,OAAS,GACfxB,EACGyB,MAAmB,IAAZlB,EAAO,GAAsB,IAAZA,EAAO,GAAU,IACzCmB,KAAI,SAACC,GAEJ,IAAQC,EAA2CD,EAA3CC,GAAIpC,EAAuCmC,EAAvCnC,KAAMqC,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,cAAeC,EAAWJ,EAAXI,OACxC,OACE,UAACV,EAAA,EAAD,CAEEN,GAAI,CACF,CAAE,mCAAoC,CAAEiB,OAAQ,IAChD,CACE,UAAW,CACTC,OAAQ,UACRhB,gBAAiB,aAIvBiB,QAAS,kBAAM9B,EAAS,UAAD,OAAWwB,KAXpC,WAaE,SAACN,EAAA,EAAD,WACE,UAAC/B,EAAA,EAAD,CAAKwB,GAAI,CAAEoB,QAAS,OAAQC,WAAY,UAAxC,WACE,gBACEC,OAAQ,GACRC,IAAKT,EACLU,IAAK/C,EACLgD,MAAO,CAAEC,YAAa,SAL1B,UAOMjD,EAPN,aAOeuC,SAGjB,SAACT,EAAA,EAAD,UAAYQ,MAvBPF,aA6BnB,SAACc,EAAA,EAAD,CACEC,MAAO,GACPpC,KAAMA,EACNqC,SA9Ee,SAACC,EAA6BC,GACrDtC,EAAQsC,IA8EAC,QAAQ,WACRC,MAAM,UACNjC,GAAI,CACF,CAAEkC,QAAS,EAAGd,QAAS,OAAQe,eAAgB,UAC/C,CACE,WAAY,CAAEhC,MAAO,gBAM9Bf,IAAS,gCAAMA,QAAN,IAAMA,OAAN,EAAMA,EAAOgD,c,UCtG7B,EARiB,WACf,OACE,SAACC,EAAA,EAAD,CAAMhE,MAAM,wBAAwBC,YAAY,WAAhD,UACE,SAAC,EAAD","sources":["components/Page/Page.tsx","hooks/useAppDispatch.ts","hooks/useAppSelector.ts","components/CoinsList/CoinsList.tsx","pages/MainPage/MainPage.tsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport { forwardRef, PropsWithChildren, ReactNode } from 'react';\nimport { Helmet } from 'react-helmet-async';\n\ninterface IPageProps {\n  children: ReactNode;\n  title: string;\n  description: string;\n}\n\nconst Page = forwardRef<ReactNode, PropsWithChildren<IPageProps>>(\n  ({ children, title = '', description = '', ...other }, ref) => (\n    <Box ref={ref} {...other}>\n      <Helmet>\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n      </Helmet>\n      {children}\n    </Box>\n  ),\n);\n\nexport default Page;\n","import { useDispatch } from 'react-redux';\nimport type { AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from '../store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ChangeEvent, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  CircularProgress,\n  Pagination,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport { fetchCoins, selectCoins } from '../../store/slices/coinsSlice';\n\nconst CoinsList = () => {\n  const dispatch = useAppDispatch();\n  const { values: coins, isLoading, error } = useAppSelector(selectCoins);\n  const navigate = useNavigate();\n  const [page, setPage] = useState(1);\n\n  const handleChangePage = (event: ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  };\n\n  useEffect(() => {\n    dispatch(fetchCoins());\n  }, [dispatch]);\n  return (\n    <>\n      {isLoading ? (\n        <CircularProgress />\n      ) : (\n        <TableContainer\n          component={Paper}\n          sx={[\n            {\n              borderRadius: '0px',\n              backgroundColor: 'inherit',\n            },\n            { '& td, & th': { color: 'white' } },\n          ]}\n        >\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Coin</TableCell>\n                <TableCell>Current Price</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {!coins && (\n                <tr>\n                  <td>\n                    <div>Not Coins</div>\n                  </td>\n                </tr>\n              )}\n              {!!coins &&\n                coins.length > 0 &&\n                coins\n                  .slice((page - 1) * 10, (page - 1) * 10 + 10)\n                  .map((coin) => {\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    const { id, name, image, current_price, symbol } = coin;\n                    return (\n                      <TableRow\n                        key={id}\n                        sx={[\n                          { '&:last-child td, &:last-child th': { border: 0 } },\n                          {\n                            '&:hover': {\n                              cursor: 'pointer',\n                              backgroundColor: '#212B30',\n                            },\n                          },\n                        ]}\n                        onClick={() => navigate(`crypta/${id}`)}\n                      >\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <img\n                              height={50}\n                              src={image}\n                              alt={name}\n                              style={{ marginRight: '8px' }}\n                            />\n                            {`${name}, ${symbol}`}\n                          </Box>\n                        </TableCell>\n                        <TableCell>{current_price}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n            </TableBody>\n          </Table>\n          <Pagination\n            count={10}\n            page={page}\n            onChange={handleChangePage}\n            variant=\"outlined\"\n            shape=\"rounded\"\n            sx={[\n              { padding: 1, display: 'flex', justifyContent: 'center' },\n              {\n                '& li > *': { color: 'white' },\n              },\n            ]}\n          />\n        </TableContainer>\n      )}\n      {error && <div>{error?.message}</div>}\n    </>\n  );\n};\n\nexport default CoinsList;\n","import { CoinsList } from '../../components/CoinsList';\nimport { Page } from '../../components/Page';\n\nconst MainPage = () => {\n  return (\n    <Page title=\"MainPage | CryptaInfo\" description=\"Mainpage\">\n      <CoinsList />\n    </Page>\n  );\n};\n\nexport default MainPage;\n"],"names":["forwardRef","ref","children","title","description","other","Box","name","content","useAppDispatch","useDispatch","useAppSelector","useSelector","dispatch","selectCoins","coins","values","isLoading","error","navigate","useNavigate","useState","page","setPage","useEffect","fetchCoins","CircularProgress","TableContainer","component","Paper","sx","borderRadius","backgroundColor","color","Table","TableHead","TableRow","TableCell","TableBody","length","slice","map","coin","id","image","current_price","symbol","border","cursor","onClick","display","alignItems","height","src","alt","style","marginRight","Pagination","count","onChange","event","value","variant","shape","padding","justifyContent","message","Page"],"sourceRoot":""}